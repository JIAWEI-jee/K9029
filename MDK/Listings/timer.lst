C51 COMPILER V9.56.0.0   TIMER                                                             09/16/2020 15:12:20 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\output\timer.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\HAEDWARE\Timer\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\source;..\HAEDWARE\Flash;..\HAEDWARE\DELAY;..\HAEDWARE\HT1621B;..\HAEDWARE\Uart;..\HAEDWARE\Key;..\HAEDWARE\Timer;.
                    -.\HAEDWARE\Pwm;..\HAEDWARE\ADC;..\HAEDWARE\WDT;..\HAEDWARE\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) TABS(2) O
                    -BJECT(.\output\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "flash.h"
   3          #include "uart.h"
   4          #include "lcd_display.h"
   5          #include "key.h"
   6          //----------------time---------------
   7          u8 time_cnt = 0;
   8          u16 time_sec = 0;
   9          u16 cnt_heat_time = 0;
  10          u8 over_rang_time_std = 0;
  11          u8 Gap_protect_std = 0 ;
  12          u8 On_stay = 0;
  13          u8  Open_Heat_Value = 0;
  14          u8 Heat_start_std = 0;
  15          u16 time_heat = 0;
  16          u16 temp_time = 0 ;
  17          u16 correct_time = 0;
  18          u8 one_heat = 0;
  19          u16 exti_cail_cnt = 0;
  20          
  21          void set_time_sec_val ( u16 sec )
  22          {
  23   1        time_sec = sec;
  24   1        time_cnt = 0;
  25   1        gm_printf ( "set time second:%d\r\n",sec );
  26   1      }
  27          void set_correct_time(u8 gap)
  28          {
  29   1        
  30   1      switch ( gap )
  31   1        {
  32   2          case GAP_WARM:
  33   2            correct_time = corrected_time_warm_temp;
  34   2            break;
  35   2          case GAP_1:
  36   2            correct_time = corrected_time_GAP_1_temp;
  37   2            break;
  38   2          case GAP_2:
  39   2            correct_time = corrected_time_GAP_2_temp;
  40   2            break;
  41   2          case GAP_3:
  42   2            correct_time = corrected_time_GAP_3_temp;
  43   2            break;
  44   2          case GAP_4:
  45   2            correct_time = corrected_time_GAP_4_temp;
  46   2            break;
  47   2          case GAP_5:
  48   2            correct_time = corrected_time_GAP_5_temp;
  49   2            break;
  50   2          case GAP_6:
  51   2            correct_time = corrected_time_GAP_6_temp;
  52   2            break;
C51 COMPILER V9.56.0.0   TIMER                                                             09/16/2020 15:12:20 PAGE 2   

  53   2          case GAP_7:
  54   2            correct_time = corrected_time_GAP_7_temp;
  55   2            break;
  56   2          case GAP_8:
  57   2            correct_time = corrected_time_GAP_8_temp;
  58   2            break;
  59   2          case GAP_9:
  60   2            correct_time = corrected_time_GAP_9_temp;
  61   2            break;
  62   2      
  63   2      }
  64   1        }
  65           static void set_correct_Value ( void )
  66          {
  67   1        switch ( flash_info.gap )
  68   1        {
  69   2          case GAP_WARM:
  70   2            Open_Heat_Value = corrected_value_warm_temp;
  71   2            break;
  72   2          case GAP_1:
  73   2            Open_Heat_Value = corrected_value_GAP_1_temp;
  74   2            break;
  75   2          case GAP_2:
  76   2            Open_Heat_Value = corrected_value_GAP_2_temp;
  77   2            break;
  78   2          case GAP_3:
  79   2            Open_Heat_Value = corrected_value_GAP_3_temp;
  80   2            break;
  81   2          case GAP_4:
  82   2            Open_Heat_Value = corrected_value_GAP_4_temp;
  83   2            break;
  84   2          case GAP_5:
  85   2            Open_Heat_Value = corrected_value_GAP_5_temp;
  86   2            break;
  87   2          case GAP_6:
  88   2            Open_Heat_Value = corrected_value_GAP_6_temp;
  89   2            break;
  90   2          case GAP_7:
  91   2            Open_Heat_Value = corrected_value_GAP_7_temp;
  92   2            break;
  93   2          case GAP_8:
  94   2            Open_Heat_Value = corrected_value_GAP_8_temp;
  95   2            break;
  96   2          case GAP_9:
  97   2            Open_Heat_Value = corrected_value_GAP_9_temp;
  98   2            break;
  99   2      
 100   2      
 101   2        }
 102   1      
 103   1      }
 104          static void set_heat_val ( void )
 105          {
 106   1        if ( Heat_start_std == 2)
 107   1        {
 108   2      
 109   2            
 110   2          if ( ++time_heat > correct_time )
 111   2          {
 112   3            KEY_printf ( "exchange_heat_value \r\n" );
 113   3            Heat_start_std = 0;
 114   3            time_heat = 0;
C51 COMPILER V9.56.0.0   TIMER                                                             09/16/2020 15:12:20 PAGE 3   

 115   3            one_heat = 0;
 116   3      
 117   3            set_correct_Value (  );
 118   3          }
 119   2        }
 120   1      //  if (Heat_start_std == 2)
 121   1      //    {
 122   1      //       one_heat = 1;
 123   1      //           if ( ++time_heat > Heat_Value)
 124   1      //            {
 125   1      //               one_heat = 0;
 126   1      //              Heat_start_std = 1;
 127   1      //        }
 128   1      //      
 129   1      //      }
 130   1      }
 131          
 132          void set_time_sec ( void )
 133          {
 134   1        time_cnt = 0;
 135   1        if ( flash_info.timer == TIMER_ON )
 136   1        {
 137   2          time_sec = 0;
 138   2          cnt_heat_time = 0;
 139   2          temp_time = 0;
 140   2        }
 141   1        else if ( flash_info.timer == TIMER_0_5H )
 142   1        {
 143   2          time_sec = 30*60;
 144   2          cnt_heat_time = 0;
 145   2          temp_time = 0;
 146   2        }
 147   1        else if ( flash_info.timer == TIMER_1H )
 148   1        {
 149   2          time_sec = 60*60;
 150   2          cnt_heat_time = 0;
 151   2          temp_time = 0;
 152   2        }
 153   1        else if ( flash_info.timer == TIMER_2H )
 154   1        {
 155   2          time_sec = 2*60*60;
 156   2          cnt_heat_time = 0;
 157   2          temp_time = 0;
 158   2        }
 159   1        else if ( flash_info.timer == TIMER_4H )
 160   1        {
 161   2          time_sec = 4*60*60;
 162   2          cnt_heat_time = 0;
 163   2          temp_time = 0;
 164   2        }
 165   1        else if ( flash_info.timer == TIMER_8H )
 166   1        {
 167   2          time_sec = 8*60*60;
 168   2          cnt_heat_time = 0;
 169   2          temp_time = 0;
 170   2        }
 171   1        gm_printf ( "time second:%d \r\n",time_sec );
 172   1      }
 173          
 174          
 175          void time0_init ( void )
 176          {
C51 COMPILER V9.56.0.0   TIMER                                                             09/16/2020 15:12:20 PAGE 4   

 177   1        /**********************************TIM0配置初始化**************************************/
 178   1        TCON1 = 0x00;           //Tx0定时器时钟为Fosc/12
 179   1        TMOD = 0x00;            //16位重装载定时器/计数器
 180   1        //定时10ms
 181   1        //反推初值  = 65536 - ((10/1000) / (1/(Fosc / Timer分频系数)))
 182   1        //        = 65536 - ((10/1000) / (1/(16000000 / 12)))
 183   1        //      = 65536 - 13333
 184   1        //      = 0xCBEC
 185   1        // TH0 = 0xCB;
 186   1        // TL0 = 0xEB;              //T0定时时间10ms  16MHZ
 187   1        TH0 = 0xF2;
 188   1        TL0 = 0xFB;             //T0定时时间10ms  4MHZ
 189   1        TF0 = 0;//清除中断标志
 190   1        ET0 = 1;//打开T0中断
 191   1        TR0 = 1;//使能T0
 192   1        EA = 1;               //打开总中断
 193   1      }
 194          
 195          
 196          
 197          //10ms
 198          void TIMER0_Rpt ( void ) interrupt TIMER0_VECTOR
 199          {
 200   1        if ( get_device_state() == ON ) //flash_info.timer != TIMER_ON &&
 201   1        {
 202   2          time_cnt++;
 203   2          if ( time_cnt >= 100 )
 204   2          {
 205   3            set_heat_val();
 206   3      
 207   3            if ( On_stay == 2 )  // stay on 模式下进行保护
 208   3            {
 209   4              cnt_heat_time++;
 210   4              if ( cnt_heat_time > overrang_time )
 211   4              {
 212   5                On_stay = 0;
 213   5                cnt_heat_time = 0;
 214   5                over_rang_time_std = 1;
 215   5                //gm_printf ( "On_stay_overrang \r\n" );
 216   5              }
 217   4      
 218   4            }
 219   3            if ( time_sec > 0 )
 220   3            {
 221   4      
 222   4              time_sec--;
 223   4              if ( Gap_protect_std == 2 )
 224   4              {
 225   5      
 226   5                cnt_heat_time++;
 227   5      
 228   5      
 229   5                if ( cnt_heat_time > overrang_time )
 230   5                {
 231   6                  over_rang_time_std = 1;
 232   6                  Gap_protect_std = 0;
 233   6                  cnt_heat_time = 0;
 234   6                  gm_printf ( "protect \r\n" );
 235   6                }
 236   5              }
 237   4            }
 238   3            else
C51 COMPILER V9.56.0.0   TIMER                                                             09/16/2020 15:12:20 PAGE 5   

 239   3            {
 240   4              if ( flash_info.timer != TIMER_ON )
 241   4              {
 242   5                set_device_state ( OFF );
 243   5                time_sec = 0;
 244   5                cnt_heat_time = 0;
 245   5                Gap_protect_std = 0;
 246   5                On_stay = 0;
 247   5                ht1621_all_clear(); //定时时间到
 248   5                gm_printf ( "time off \r\n" );
 249   5              }
 250   4            }
 251   3            //gm_printf("time_sec=%d \r\n",time_sec);
 252   3            time_cnt = 0;
 253   3          }
 254   2        }
 255   1        
 256   1        else if (calibration_std == 1)
 257   1        {
 258   2          if(++exti_cail_cnt > cali_time)
 259   2          {
 260   3            calibration_std = 0;
 261   3            exti_cail_cnt = 0;
 262   3          }
 263   2        }
 264   1      }
 265          
 266          void time_Print ( void )
 267          {
 268   1        switch ( ++temp_time )
 269   1        {
 270   2          case H_0_5:
 271   2            gm_printf ( "time_to_0.5H  time_sec=%d \r\n",time_sec );
 272   2            temp_time = 0;
 273   2            break;
 274   2          case H_1_0:
 275   2            gm_printf ( "time_to_1H  time_sec=%d \r\n",time_sec );
 276   2            temp_time = 0;
 277   2            break;
 278   2          case H_2_0:
 279   2            gm_printf ( "time_to_2H  time_sec=%d \r\n",time_sec );
 280   2            temp_time = 0;
 281   2            break;
 282   2          case H_4_0:
 283   2            gm_printf ( "time_to_4H  time_sec=%d \r\n",time_sec );
 284   2            temp_time = 0;
 285   2            break;
 286   2          case H_8_0:
 287   2            gm_printf ( "time_to_8H  time_sec=%d \r\n",time_sec );
 288   2            temp_time = 0;
 289   2            break;
 290   2        }
 291   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    861    ----
   CONSTANT SIZE    =    222    ----
   XDATA SIZE       =     19    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.56.0.0   TIMER                                                             09/16/2020 15:12:20 PAGE 6   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
