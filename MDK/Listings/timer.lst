C51 COMPILER V9.56.0.0   TIMER                                                             08/31/2020 19:31:42 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\output\timer.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\HAEDWARE\Timer\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\source;..\HAEDWARE\Flash;..\HAEDWARE\DELAY;..\HAEDWARE\HT1621B;..\HAEDWARE\Uart;..\HAEDWARE\Key;..\HAEDWARE\Timer;.
                    -.\HAEDWARE\Pwm;..\HAEDWARE\ADC;..\HAEDWARE\WDT;..\HAEDWARE\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) TABS(2) O
                    -BJECT(.\output\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "flash.h"
   3          #include "uart.h"
   4          #include "lcd_display.h"
   5          
   6          //----------------time---------------
   7          u8 time_cnt = 0;
   8          u16 time_sec = 0;
   9          u16 cnt_heat_time = 0;
  10          u8 over_rang_time_std = 0;
  11          u8 Gap_protect_std = 0 ;
  12          u8 On_stay = 0;
  13          u8  Open_Heat_Value = 0;
  14          u8 Heat_start_std = 0;
  15          u16 time_heat = 0;
  16          u16 temp_time = 0 ;
  17          u16 correct_time = 0;
  18          u8 one_heat = 0;
  19          
  20          void set_time_sec_val ( u16 sec )
  21          {
  22   1        time_sec = sec;
  23   1        time_cnt = 0;
  24   1        gm_printf ( "set time second:%d\r\n",sec );
  25   1      }
  26          void set_correct_time(u8 gap)
  27          {
  28   1        
  29   1      switch ( gap )
  30   1        {
  31   2          case GAP_WARM:
  32   2            correct_time = corrected_time_warm_temp;
  33   2            break;
  34   2          case GAP_1:
  35   2            correct_time = corrected_time_GAP_1_temp;
  36   2            break;
  37   2          case GAP_2:
  38   2            correct_time = corrected_time_GAP_2_temp;
  39   2            break;
  40   2          case GAP_3:
  41   2            correct_time = corrected_time_GAP_3_temp;
  42   2            break;
  43   2          case GAP_4:
  44   2            correct_time = corrected_time_GAP_4_temp;
  45   2            break;
  46   2          case GAP_5:
  47   2            correct_time = corrected_time_GAP_5_temp;
  48   2            break;
  49   2          case GAP_6:
  50   2            correct_time = corrected_time_GAP_6_temp;
  51   2            break;
  52   2          case GAP_7:
C51 COMPILER V9.56.0.0   TIMER                                                             08/31/2020 19:31:42 PAGE 2   

  53   2            correct_time = corrected_time_GAP_7_temp;
  54   2            break;
  55   2          case GAP_8:
  56   2            correct_time = corrected_time_GAP_8_temp;
  57   2            break;
  58   2          case GAP_9:
  59   2            correct_time = corrected_time_GAP_9_temp;
  60   2            break;
  61   2      
  62   2      }
  63   1        }
  64           static void set_correct_Value ( void )
  65          {
  66   1        switch ( flash_info.gap )
  67   1        {
  68   2          case GAP_WARM:
  69   2            Open_Heat_Value = corrected_value_warm_temp;
  70   2            break;
  71   2          case GAP_1:
  72   2            Open_Heat_Value = corrected_value_GAP_1_temp;
  73   2            break;
  74   2          case GAP_2:
  75   2            Open_Heat_Value = corrected_value_GAP_2_temp;
  76   2            break;
  77   2          case GAP_3:
  78   2            Open_Heat_Value = corrected_value_GAP_3_temp;
  79   2            break;
  80   2          case GAP_4:
  81   2            Open_Heat_Value = corrected_value_GAP_4_temp;
  82   2            break;
  83   2          case GAP_5:
  84   2            Open_Heat_Value = corrected_value_GAP_5_temp;
  85   2            break;
  86   2          case GAP_6:
  87   2            Open_Heat_Value = corrected_value_GAP_6_temp;
  88   2            break;
  89   2          case GAP_7:
  90   2            Open_Heat_Value = corrected_value_GAP_7_temp;
  91   2            break;
  92   2          case GAP_8:
  93   2            Open_Heat_Value = corrected_value_GAP_8_temp;
  94   2            break;
  95   2          case GAP_9:
  96   2            Open_Heat_Value = corrected_value_GAP_9_temp;
  97   2            break;
  98   2      
  99   2      
 100   2        }
 101   1      
 102   1      }
 103          static void set_heat_val ( void )
 104          {
 105   1        if ( Heat_start_std == 2)
 106   1        {
 107   2      
 108   2            
 109   2          if ( ++time_heat > correct_time )
 110   2          {
 111   3            KEY_printf ( "exchange_heat_value \r\n" );
 112   3            Heat_start_std = 0;
 113   3            time_heat = 0;
 114   3            one_heat = 0;
C51 COMPILER V9.56.0.0   TIMER                                                             08/31/2020 19:31:42 PAGE 3   

 115   3      
 116   3            set_correct_Value (  );
 117   3          }
 118   2        }
 119   1      //  if (Heat_start_std == 2)
 120   1      //    {
 121   1      //       one_heat = 1;
 122   1      //           if ( ++time_heat > Heat_Value)
 123   1      //            {
 124   1      //               one_heat = 0;
 125   1      //              Heat_start_std = 1;
 126   1      //        }
 127   1      //      
 128   1      //      }
 129   1      }
 130          
 131          void set_time_sec ( void )
 132          {
 133   1        time_cnt = 0;
 134   1        if ( flash_info.timer == TIMER_ON )
 135   1        {
 136   2          time_sec = 0;
 137   2          cnt_heat_time = 0;
 138   2          temp_time = 0;
 139   2        }
 140   1        else if ( flash_info.timer == TIMER_0_5H )
 141   1        {
 142   2          time_sec = 30*60;
 143   2          cnt_heat_time = 0;
 144   2          temp_time = 0;
 145   2        }
 146   1        else if ( flash_info.timer == TIMER_1H )
 147   1        {
 148   2          time_sec = 60*60;
 149   2          cnt_heat_time = 0;
 150   2          temp_time = 0;
 151   2        }
 152   1        else if ( flash_info.timer == TIMER_2H )
 153   1        {
 154   2          time_sec = 2*60*60;
 155   2          cnt_heat_time = 0;
 156   2          temp_time = 0;
 157   2        }
 158   1        else if ( flash_info.timer == TIMER_4H )
 159   1        {
 160   2          time_sec = 4*60*60;
 161   2          cnt_heat_time = 0;
 162   2          temp_time = 0;
 163   2        }
 164   1        else if ( flash_info.timer == TIMER_8H )
 165   1        {
 166   2          time_sec = 8*60*60;
 167   2          cnt_heat_time = 0;
 168   2          temp_time = 0;
 169   2        }
 170   1        gm_printf ( "time second:%d \r\n",time_sec );
 171   1      }
 172          
 173          
 174          void time0_init ( void )
 175          {
 176   1        /**********************************TIM0配置初始化**************************************/
C51 COMPILER V9.56.0.0   TIMER                                                             08/31/2020 19:31:42 PAGE 4   

 177   1        TCON1 = 0x00;           //Tx0定时器时钟为Fosc/12
 178   1        TMOD = 0x00;            //16位重装载定时器/计数器
 179   1        //定时10ms
 180   1        //反推初值  = 65536 - ((10/1000) / (1/(Fosc / Timer分频系数)))
 181   1        //        = 65536 - ((10/1000) / (1/(16000000 / 12)))
 182   1        //      = 65536 - 13333
 183   1        //      = 0xCBEC
 184   1        // TH0 = 0xCB;
 185   1        // TL0 = 0xEB;              //T0定时时间10ms  16MHZ
 186   1        TH0 = 0xF2;
 187   1        TL0 = 0xFB;             //T0定时时间10ms  4MHZ
 188   1        TF0 = 0;//清除中断标志
 189   1        ET0 = 1;//打开T0中断
 190   1        TR0 = 1;//使能T0
 191   1        EA = 1;               //打开总中断
 192   1      }
 193          
 194          
 195          
 196          //10ms
 197          void TIMER0_Rpt ( void ) interrupt TIMER0_VECTOR
 198          {
 199   1        if ( get_device_state() == ON ) //flash_info.timer != TIMER_ON &&
 200   1        {
 201   2          time_cnt++;
 202   2          if ( time_cnt >= 100 )
 203   2          {
 204   3            set_heat_val();
 205   3      
 206   3            if ( On_stay == 2 )  // stay on 模式下进行保护
 207   3            {
 208   4              cnt_heat_time++;
 209   4              if ( cnt_heat_time > overrang_time )
 210   4              {
 211   5                On_stay = 0;
 212   5                cnt_heat_time = 0;
 213   5                over_rang_time_std = 1;
 214   5                //gm_printf ( "On_stay_overrang \r\n" );
 215   5              }
 216   4      
 217   4            }
 218   3            if ( time_sec > 0 )
 219   3            {
 220   4      
 221   4              time_sec--;
 222   4              if ( Gap_protect_std == 2 )
 223   4              {
 224   5      
 225   5                cnt_heat_time++;
 226   5      
 227   5      
 228   5                if ( cnt_heat_time > overrang_time )
 229   5                {
 230   6                  over_rang_time_std = 1;
 231   6                  Gap_protect_std = 0;
 232   6                  cnt_heat_time = 0;
 233   6                  gm_printf ( "protect \r\n" );
 234   6                }
 235   5              }
 236   4            }
 237   3            else
 238   3            {
C51 COMPILER V9.56.0.0   TIMER                                                             08/31/2020 19:31:42 PAGE 5   

 239   4              if ( flash_info.timer != TIMER_ON )
 240   4              {
 241   5                set_device_state ( OFF );
 242   5                time_sec = 0;
 243   5                cnt_heat_time = 0;
 244   5                Gap_protect_std = 0;
 245   5                On_stay = 0;
 246   5                ht1621_all_clear(); //定时时间到
 247   5                gm_printf ( "time off \r\n" );
 248   5              }
 249   4            }
 250   3            //gm_printf("time_sec=%d \r\n",time_sec);
 251   3            time_cnt = 0;
 252   3          }
 253   2        }
 254   1      }
 255          
 256          void time_Print ( void )
 257          {
 258   1        switch ( ++temp_time )
 259   1        {
 260   2          case H_0_5:
 261   2            gm_printf ( "time_to_0.5H  time_sec=%d \r\n",time_sec );
 262   2            temp_time = 0;
 263   2            break;
 264   2          case H_1_0:
 265   2            gm_printf ( "time_to_1H  time_sec=%d \r\n",time_sec );
 266   2            temp_time = 0;
 267   2            break;
 268   2          case H_2_0:
 269   2            gm_printf ( "time_to_2H  time_sec=%d \r\n",time_sec );
 270   2            temp_time = 0;
 271   2            break;
 272   2          case H_4_0:
 273   2            gm_printf ( "time_to_4H  time_sec=%d \r\n",time_sec );
 274   2            temp_time = 0;
 275   2            break;
 276   2          case H_8_0:
 277   2            gm_printf ( "time_to_8H  time_sec=%d \r\n",time_sec );
 278   2            temp_time = 0;
 279   2            break;
 280   2        }
 281   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    829    ----
   CONSTANT SIZE    =    222    ----
   XDATA SIZE       =     17    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
