C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\sour
                    -ce;..\HAEDWARE\Flash;..\HAEDWARE\DELAY;..\HAEDWARE\HT1621B;..\HAEDWARE\Uart;..\HAEDWARE\Key;..\HAEDWARE\Timer;..\HAEDWAR
                    -E\Pwm;..\HAEDWARE\ADC;..\HAEDWARE\WDT;..\HAEDWARE\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\ou
                    -tput\main.obj)

line level    source

   1          #define ALLOCATE_EXTERN
   2          #include "HC89F303.h"
   3          #include "intrins.h"//nop
   4          #include "uart.h"
   5          #include "delay.h"
   6          #include "key.h"
   7          #include "flash.h"
   8          #include "timer.h"
   9          #include "pwm.h"
  10          #include "lcd_display.h"
  11          #include "adc.h"
  12          #include "wdt.h"
  13          
  14          #define SKU 9029
  15          #define SOFT_VER "1.00.00"
  16          
  17          u16 adc_cnt = 0;
  18          u8  first_heat_std = 0,fault_std = 0;
  19          
  20          void Set_Temp ( u16 temp );
  21          void Controll_Heat ( u16 temp_set,u16 temp_now );
  22          void Protect ( void );
  23          void Error ( void );
  24          
  25          void device_init ( void )
  26          {
  27   1        /************************************系统初始化****************************************/
  28   1        // CLKSWR = 0x51;           //选择内部高频RC为系统时钟，内部高频RC 2分频，Fosc=16MHz
  29   1        CLKSWR = 0x53;  //8分频 32/8 = 4M
  30   1        CLKDIV = 0x01;            //Fosc 1分频得到Fcpu，Fcpu=16MHz
  31   1        P0M2 = 0x10;            //P02设置为非施密特数字输入
  32   1      }
  33          
  34          
  35          static void key_handle ( void )
  36          {
  37   1        u8 key_val = 0;
  38   1        if ( fault_std == 0 )
  39   1        {
  40   2          key_val = key_scan();
  41   2        }
  42   1        else
  43   1        {
  44   2          key_val = 0;
  45   2        }
  46   1        if ( ( key_val == KEY_1_PRES ) && ( calibration_std == 0 ) )
  47   1        {
  48   2          KEY_printf ( " key_scan\r\n" );
  49   2      
  50   2          if ( get_device_state() == ON )
  51   2          {
  52   3      
C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 2   

  53   3            set_device_state ( OFF );
  54   3            ht1621_all_clear();
  55   3            set_pwm ( 0 );
  56   3          }
  57   2          else
  58   2          {
  59   3            set_device_state ( ON );
  60   3            set_time_sec();
  61   3      
  62   3            first_heat_std = 1;
  63   3            set_correct_time ( flash_info.gap );
  64   3            lcd_display_gap ( flash_info.gap );
  65   3            lcd_display_time ( flash_info.timer );
  66   3      
  67   3          }
  68   2        }
  69   1        else if ( get_device_state() == ON )
  70   1        {
  71   2      
  72   2      
  73   2      
  74   2          if ( key_val == KEY_2_PRES ) //档位
  75   2          {
  76   3      
  77   3            KEY_printf ( " KEY_2_PRES\r\n" );
  78   3            if ( flash_info.gap < GAP_9 )
  79   3            {
  80   4              flash_info.gap++;
  81   4      
  82   4            }
  83   3            else
  84   3            {
  85   4              flash_info.gap = GAP_1;
  86   4            }
  87   3            if ( flash_info.gap > GAP_3 )
  88   3            {
  89   4              if ( flash_info.timer == TIMER_ON )
  90   4              {
  91   5                On_stay = 2;
  92   5              }
  93   4              else if ( flash_info.timer > TIMER_2H )
  94   4              {
  95   5                Gap_protect_std = 2;
  96   5              }
  97   4            }
  98   3      
  99   3            first_heat_std = 1;
 100   3            set_correct_time ( flash_info.gap );
 101   3            lcd_display_gap ( flash_info.gap );
 102   3            //set_time_sec();
 103   3            flah_save_data();
 104   3          }
 105   2          else if ( key_val == KEY_3_PRES ) //定时
 106   2          {
 107   3      
 108   3            if ( flash_info.timer < 0x05 )
 109   3            {
 110   4              flash_info.timer++;
 111   4            }
 112   3            else
 113   3            {
 114   4              flash_info.timer = TIMER_ON;
C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 3   

 115   4            }
 116   3      
 117   3      //      KEY_printf ( "timer:%d \r\n", ( u16 ) flash_info.timer );
 118   3            lcd_display_time ( flash_info.timer );
 119   3            set_time_sec();
 120   3            flah_save_data();
 121   3          }
 122   2        }
 123   1      }
 124          
 125          
 126          u16 calibration_temperature ( u16 temper )
 127          {
 128   1        u8 temp1 = 0;
 129   1        if ( ( usart_rx_flag == 2 ) && ( calibration_std == 1 ) )
 130   1        {
 131   2          temp1 = ( u8 ) temper;
 132   2          usart_rx_flag = 0;
 133   2          flash_info.correct_std = 1;
 134   2      
 135   2          if ( temper_val > 15 )
 136   2          {
 137   3            if ( temper_val > temp1 )
 138   3            {
 139   4              flash_info.correct_value = temper_val - temp1;
 140   4              flash_info.correct_sign = 1; //为正公差
 141   4            }
 142   3            else
 143   3            {
 144   4              flash_info.correct_value = temp1 - temper_val;
 145   4      
 146   4              hal_uart_putchar ( flash_info.correct_value );
 147   4              flash_info.correct_sign = 2; //为负公差
 148   4            }
 149   3            if ( ( flash_info.correct_value < 2 ) || ( flash_info.correct_value > 20 ) )
 150   3            {
 151   4              flash_info.correct_value = 0;
 152   4              flash_info.correct_sign = 0;
 153   4            }
 154   3            flah_save_data();
 155   3            producte_send_cmd ( 0x02, 0x02 );
 156   3          }
 157   2        }
 158   1        if ( flash_info.correct_sign == 1 )
 159   1        {
 160   2          return ( ( u16 ) ( temper = temper + flash_info.correct_value ) );
 161   2        }
 162   1        else if ( flash_info.correct_sign == 2 )
 163   1        {
 164   2          return ( ( u16 ) ( temper = temper - flash_info.correct_value ) );
 165   2        }
 166   1        return ( ( u16 ) temper );
 167   1      
 168   1      }
 169          
 170          
 171          
 172          u16 temp_calc ( u16 uR510,u16 uRw )
 173          {
 174   1        u8 i = 0;
 175   1        u8 basi_tmp = 50;
 176   1        u8 k = 10;
C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 4   

 177   1        float u1 = 0;
 178   1      
 179   1        if ( ( uR510 < 50 ) || ( uR510 > uRw ) )
 180   1        {
 181   2          return 0xff;
 182   2        }
 183   1      
 184   1      
 185   1        u1 = (  ( ( float ) uRw /1000 ) - ( ( float ) uR510/1000 ) ) / ( ( ( float ) uR510/1000 ) /510 );
 186   1        if ( u1 < 0 )
 187   1        {
 188   2          return 0xff;
 189   2        }
 190   1        gm_printf ( "R = %f  \r\n",u1 );
 191   1        u1 = u1 / Length;
 192   1        if ( u1 < 73 )
 193   1        {
 194   2          return 0;
 195   2        }
 196   1        // gm_printf("average R = %f \r\n",u1);
 197   1        u1 = u1 / Temperature_Value;
 198   1        //gm_printf("cmp = %f \r\n",u1);
 199   1        if ( u1*Temperature_Value > Temperature_Value )
 200   1        {
 201   2          while ( 1 )
 202   2          {
 203   3            u1 = u1 / ( 1 + 0.0048 );
 204   3            i++;
 205   3            if ( u1 <= 1 )
 206   3            {
 207   4              break;
 208   4            }
 209   3      
 210   3          }
 211   2          // gm_printf("basi_tmp_u1 = %d \r\n",basi_tmp);
 212   2          basi_tmp = basi_tmp + i;
 213   2          //gm_printf("basi_tmp_u1f = %d \r\n",basi_tmp);
 214   2        }
 215   1        else
 216   1        {
 217   2          while ( 1 )
 218   2          {
 219   3            u1 = u1 / ( 1 - 0.0048 );
 220   3            i++;
 221   3            if ( u1 >= 1 )
 222   3            {
 223   4              break;
 224   4            }
 225   3      
 226   3      
 227   3          }
 228   2          // gm_printf("i = %d \r\n",i);
 229   2          basi_tmp = basi_tmp - i;
 230   2      
 231   2          //gm_printf("basi_unnder20 = %d \r\n",basi_tmp);
 232   2        }
 233   1        //gm_printf("basi_tmpF:%d \r\n",basi_tmp);
 234   1      
 235   1        return ( basi_tmp );
 236   1      }
 237          
 238          
C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 5   

 239          
 240          void temperature_handle ( void )
 241          {
 242   1        u16 temp = 0;
 243   1        u16 adc_val1 = 0,adc_val3 = 0;
 244   1        static u8 error_std = 0;
 245   1        adc_cnt++;
 246   1      
 247   1        if ( adc_cnt > 10000 )
 248   1        {
 249   2          adc_cnt = 0;
 250   2          get_voltage ( &adc_val1,&adc_val3 );
 251   2      
 252   2          //  KEY_printf ( "adv1 = %d adv3 =%d \r\n",adc_val1,adc_val3 );  //pjw set
 253   2          temp = temp_calc ( adc_val1, adc_val3 );
 254   2      //      KEY_printf ( "temp val:%d \r\n",temp );
 255   2        temp =  calibration_temperature(temp);
 256   2          KEY_printf ( "%d \r\n",temp );
 257   2          
 258   2          if ( adc_val1 >50 )
 259   2          {
 260   3            if ( get_device_state() == ON )
 261   3            {
 262   4              if ( first_heat_std == 1 )
 263   4              {
 264   5                first_heat_std = 0;
 265   5                if ( temp > 50 )
 266   5                {
 267   6                  Heat_start_std = 2;
 268   6                  Open_Heat_Value = corrected_value_GAP_9_temp  ;
 269   6                }
 270   5                else
 271   5                {
 272   6                  Heat_start_std = 2;
 273   6                  one_heat = 1;
 274   6                  Open_Heat_Value = corrected_value_warm_temp ;
 275   6                }
 276   5              }
 277   4      
 278   4              lcd_display_time ( flash_info.timer );
 279   4              lcd_display_gap ( flash_info.gap );
 280   4              Set_Temp ( temp );
 281   4            }
 282   3            else
 283   3            {
 284   4              if ( calibration_std == 1 )
 285   4              {
 286   5                set_pwm ( 0 );
 287   5                ht1621_all_clear();
 288   5                lcd_display_gap ( flash_info.gap );
 289   5                cali_display_std = 1;
 290   5              }
 291   4              else
 292   4              { 
 293   5              set_pwm ( 0 );
 294   5              ht1621_send_cmd ( LCD_OFF );
 295   5                cali_display_std = 0;
 296   5              } 
 297   4            }
 298   3            fault_std = 0;
 299   3          }
 300   2          else
C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 6   

 301   2          {
 302   3            calibration_std = 0;
 303   3            cali_display_std = 0;
 304   3            ht1621_all_clear();
 305   3            set_pwm ( 0 );
 306   3            error_std = Error_STD;
 307   3            lcd_display_gap ( error_std );
 308   3            fault_std = 1;
 309   3          }
 310   2      
 311   2        }
 312   1      
 313   1      
 314   1      }
 315          
 316          
 317          
 318          
 319          void main ( void )
 320          {
 321   1        device_init();
 322   1      
 323   1        uart_init();
 324   1        adc_init();
 325   1        EA = 1;//开启总中断
 326   1        key_init();
 327   1        time0_init();
 328   1        flash_init();
 329   1        pwm_init ( 200 );
 330   1        init_lcd_ht1621b();
 331   1        delay_ms ( 800 );
 332   1        wdt_init ( 2 );
 333   1        PID_Init();
*** WARNING C206 IN LINE 333 OF ..\source\main.c: 'PID_Init': missing function-prototype
 334   1        set_pwm ( 0 );
 335   1        gm_printf ( "\r\n==================================\r\n" );
 336   1        gm_printf ( "sku:K%d \r\n", ( u16 ) SKU );
 337   1        gm_printf ( "soft version:%s \r\n",SOFT_VER );
 338   1        gm_printf ( "gap %d \r\n", ( u16 ) flash_info.gap );      //挡位
 339   1        gm_printf ( "timer %d \r\n", ( u16 ) flash_info.timer );  // 时间长度
 340   1        gm_printf ( "==================================\r\n" );
 341   1      
 342   1        while ( 1 )
 343   1        {
 344   2          key_handle();
 345   2          temperature_handle();
 346   2          // Protect();
 347   2          //uart_handle();
 348   2          clear_wdt();
 349   2      
 350   2        }
 351   1      }
 352          
 353          
 354          void Controll_Heat ( u16 temp_set,u16 temp_now )
 355          {
 356   1      //KEY_printf ( "temp_set val:%d \r\n",temp_set );
 357   1        if ( temp_now >  temp_set   )
 358   1        {
 359   2          //  KEY_printf ( "close_heat \r\n");
 360   2      
 361   2          set_pwm ( 0 ); // 关闭加热丝
C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 7   

 362   2        }
 363   1        else if ( temp_now < ( temp_set - Open_Heat_Value ) )
 364   1        {
 365   2          //KEY_printf ( "open_heat \r\n");
 366   2          set_pwm ( 10 ); //打开加热丝
 367   2        }
 368   1      }
 369          
 370          void Set_Temp ( u16 temp )
 371          {
 372   1        if ( one_heat == 1 )
 373   1        {
 374   2          //KEY_printf ( "oneheat \r\n");
 375   2          Controll_Heat ( One_Heat_Temp,temp );
 376   2        }
 377   1        else
 378   1        {
 379   2          //  KEY_printf ( "twoheat \r\n");
 380   2          switch ( flash_info.gap )
 381   2          {
 382   3            case GAP_WARM:
 383   3              Controll_Heat ( GAP_WARM_temp,temp );
 384   3              break;
 385   3            case GAP_1:
 386   3              Controll_Heat ( GAP_1_temp,temp );
 387   3              break;
 388   3            case GAP_2:
 389   3              Controll_Heat ( GAP_2_temp,temp );
 390   3              break;
 391   3            case GAP_3:
 392   3              Controll_Heat ( GAP_3_temp,temp );
 393   3              break;
 394   3            case GAP_4:
 395   3              Controll_Heat ( GAP_4_temp,temp );
 396   3              break;
 397   3            case GAP_5:
 398   3              Controll_Heat ( GAP_5_temp,temp );
 399   3              break;
 400   3            case GAP_6:
 401   3              Controll_Heat ( GAP_6_temp,temp );
 402   3              break;
 403   3            case GAP_7:
 404   3              Controll_Heat ( GAP_7_temp,temp );
 405   3              break;
 406   3            case GAP_8:
 407   3              Controll_Heat ( GAP_8_temp,temp );
 408   3              break;
 409   3            case GAP_9:
 410   3              Controll_Heat ( GAP_9_temp,temp );
 411   3              break;
 412   3      
 413   3          }
 414   2        }
 415   1      }
 416          
 417          
 418          
 419          
 420          void Protect ( void )
 421          {
 422   1        if ( over_rang_time_std == 1 )
 423   1        {
C51 COMPILER V9.56.0.0   MAIN                                                              09/04/2020 15:42:22 PAGE 8   

 424   2          if ( flash_info.gap > GAP_3 )
 425   2          {
 426   3            flash_info.gap = GAP_3;
 427   3            lcd_display_gap ( flash_info.gap );
 428   3            flah_save_data();
 429   3            over_rang_time_std = 0;
 430   3          }
 431   2        }
 432   1      }
 433          
 434          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1748    ----
   CONSTANT SIZE    =    179    ----
   XDATA SIZE       =      5      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
